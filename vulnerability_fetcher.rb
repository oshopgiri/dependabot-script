# author: @BobbyMcWho

require 'octokit'

class VulnerabilityFetcher
  attr_reader :packages, :package_manager

  def initialize(packages, package_manager)
    @packages = packages
    @package_manager = package_manager
    @package_graphql_mapping = graphql_package_names
  end

  def graphql_package_names
    mapping = {}
    packages.each { |package| mapping[graphql_variable(package)] = package }

    mapping
  end

  def fetch_advisories
    # Github API does not support hex vulnerabilities
    # if package_manager == 'hex'
    #   fetch_elixir_advisories
    # Github's vulnerability API is sorely slow to update compared to bundler-audit|ruby-advisory-db
    # elsif package_manager == 'bundler'
    #   fetch_ruby_advisories
    # else
      fetch_github_advisories
    # end
  end

  private

  def fetch_ruby_advisories
    results = {}
    packages.each do |package|
      results[package] = begin
                           client.content('rubysec/ruby-advisory-db', path: "gems/#{package}").map do |file|
                             encoded_content = client.content('rubysec/ruby-advisory-db', path: file.path).content
                             decoded_content = Base64.decode64(encoded_content)
                             YAML.load(decoded_content)
                           end
                         rescue Octokit::NotFound
                           []
                         end
    end
    format_ruby_dependencies(results)
  end

  def fetch_elixir_advisories
    results = {}
    packages.each do |package|
      results[package] = begin
                           client.content('dependabot/elixir-security-advisories', path: "packages/#{package}").map do |file|
                             encoded_content = client.content('dependabot/elixir-security-advisories', path: file.path).content
                             decoded_content = Base64.decode64(encoded_content)
                             YAML.load(decoded_content)
                           end
                         rescue Octokit::NotFound
                           []
                         end
    end
    format_elixir_dependencies(results)
  end

  def format_elixir_dependencies(raw_response)
    advisories = {}
    raw_response.each do |key, val|
      advisories[key.to_sym] = val.map do |v|
        {
          patched_versions: v['patched_versions'],
          vulnerable_versions: [],
          cve_id: v['cve'],
          url: v['link'],
          summary: v['title']
        }
      end
    end
    advisories
  end

  def format_ruby_dependencies(raw_response)
    advisories = {}
    raw_response.each do |key, val|
      advisories[key.to_sym] = val.map do |v|
        {
          patched_versions: v['patched_versions'],
          vulnerable_versions: [],
          cve_id: v['cve'],
          url: v['url'],
          summary: v['title']
        }
      end
    end
    advisories
  end

  def fetch_github_advisories
    response = client.post('/graphql', { query: query(packages, package_manager) }.to_json)
    format_github_advisories(response)
  end

  def format_github_advisories(raw_response)
    advisories = {}
    raw_response[:data]&.each do |key, val|
      advisories[@package_graphql_mapping[key]] = val[:vulnerabilities].map do |v|
        {
          patched_versions: [],
          vulnerable_versions: [v.vulnerable_version_range],
          cve_id: v.advisory.identifiers.find { |a| a.type == 'CVE' }.id,
          url: v.advisory.references.first[:url],
          summary: v.advisory.summary
        }
      end
    end
    advisories
  end

  def client
    @client ||= Octokit::Client.new(access_token: ENV['GITHUB_ACCESS_TOKEN'])
  end

  def query(packages, package_manager)
    query = "query {\n"
    packages.each do |package|
      query += <<~PACKAGE_QUERY
        #{graphql_variable(package)}: securityVulnerabilities(
          ecosystem: #{ecosystem_for(package_manager)},
          package: "#{package}",
          first: 100
        ) {
          vulnerabilities: nodes {
            vulnerable_version_range: vulnerableVersionRange
            advisory {
              identifiers {
                type: type
                id: value
              }
              summary
              references {
                url
              }
            }
          }
        }\n
      PACKAGE_QUERY
    end
    query += '}'
  end

  ECOSYSTEMS = {
    'bundler' => 'RUBYGEMS',
    'npm_and_yarn' => 'NPM',
    'pip' => 'PIP',
    'composer' => 'COMPOSER'
  }.freeze

  def ecosystem_for(package_manager)
    ECOSYSTEMS[package_manager]
  end

  def graphql_variable package
    package.gsub(/[^0-9A-Za-z_\s]/, '').snakecase.to_sym
  end
end
